[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "apify"
version = "2.3.1"
description = "Apify SDK for Python"
authors = [{ name = "Apify Technologies s.r.o.", email = "support@apify.com" }]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
]
keywords = [
    "apify",
    "sdk",
    "automation",
    "chrome",
    "crawlee",
    "crawler",
    "headless",
    "scraper",
    "scraping",
]
dependencies = [
    "apify-client>=1.9.2",
    "apify-shared>=1.2.1",
    "crawlee~=0.5.0",
    "cryptography>=42.0.0",
    "httpx>=0.27.0",
    "lazy-object-proxy>=1.10.0",
    "more_itertools>=10.2.0",
    "typing-extensions>=4.1.0",
    # TODO: Relax the upper bound once the issue is resolved:
    # https://github.com/apify/apify-sdk-python/issues/325
    "websockets>=10.0,<14.0.0",
]

[project.optional-dependencies]
scrapy = ["scrapy>=2.11.0"]

[project.urls]
"Homepage" = "https://docs.apify.com/sdk/python/"
"Apify homepage" = "https://apify.com"
"Changelog" = "https://docs.apify.com/sdk/python/docs/changelog"
"Documentation" = "https://docs.apify.com/sdk/python/"
"Issue tracker" = "https://github.com/apify/apify-sdk-python/issues"
"Repository" = "https://github.com/apify/apify-sdk-python"

[dependency-groups]
dev = [
    "build~=1.2.0",
    "filelock~=3.17.0",
    "griffe~=1.5.0",
    "mypy~=1.15.0",
    "pre-commit~=4.1.0",
    "pydoc-markdown~=4.8.0",
    "pytest~=8.3.0",
    "pytest-asyncio~=0.25.0",
    "pytest-cov~=6.0.0",
    "pytest-only~=2.1.0",
    "pytest-timeout~=2.3.0",
    "pytest-xdist~=3.6.0",
    "respx~=0.22.0",
    "ruff~=0.9.0",
    "setuptools~=75.8.0",     # setuptools are used by pytest but not explicitly required
]

[tool.hatch.build.targets.wheel]
packages = ["src/apify"]

[tool.ruff]
line-length = 120
include = ["src/**/*.py", "tests/**/*.py", "docs/**/*.py", "website/**/*.py"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed in {filename}
    "ASYNC109", # Async function definition with a `timeout` parameter
    "BLE001",   # Do not catch blind exception
    "C901",     # `{name}` is too complex
    "COM812",   # This rule may cause conflicts when used with the formatter
    "D100",     # Missing docstring in public module
    "D104",     # Missing docstring in public package
    "D107",     # Missing docstring in `__init__`
    "EM",       # flake8-errmsg
    "G004",     # Logging statement uses f-string
    "ISC001",   # This rule may cause conflicts when used with the formatter
    "FIX",      # flake8-fixme
    "PLR0911",  # Too many return statements
    "PLR0913",  # Too many arguments in function definition
    "PLR0915",  # Too many statements
    "PTH",      # flake8-use-pathlib
    "PYI034",   # `__aenter__` methods in classes like `{name}` usually return `self` at runtime
    "PYI036",   # The second argument in `__aexit__` should be annotated with `object` or `BaseException | None`
    "S102",     # Use of `exec` detected
    "S105",     # Possible hardcoded password assigned to
    "S106",     # Possible hardcoded password assigned to argument: "{name}"
    "S301",     # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "S303",     # Use of insecure MD2, MD4, MD5, or SHA1 hash function
    "S311",     # Standard pseudo-random generators are not suitable for cryptographic purposes
    "TD002",    # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...
    "TRY003",   # Avoid specifying long messages outside the exception class
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401", # Unused imports
]
"**/{tests}/*" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "S101",    # Use of assert detected
    "SLF001",  # Private member accessed: `{name}`
    "T20",     # flake8-print
    "TRY301",  # Abstract `raise` to an inner function
    "TID252",  # Prefer absolute imports over relative imports from parent modules
]
"**/{docs,website}/**" = [
    "D",       # Everything from the pydocstyle
    "INP001",  # File {filename} is part of an implicit namespace package, add an __init__.py
    "F841",    # Local variable {variable} is assigned to but never used
    "TRY301",  # Abstract `raise` to an inner function
    "PLW0603", # Using the global statement to update `{name}` is discouraged
]
"**/docs/**/scrapy_project/**/__main__.py" = [
    # Because of asyncioreactor.install() call.
    "E402", # Module level import not at top of file
]
"**/docs/**/scrapy_project/**" = [
    # Local imports are mixed up with the Apify SDK.
    "I001", # Import block is un-sorted or un-formatted
    # Class variables are common in Scrapy projects.
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    # Local imports in Scrapy project.
    "TID252", # Prefer absolute imports over relative imports from parent modules
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "crawlee.configuration.Configuration",
]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-local-folder = ["apify"]
known-first-party = ["apify_client", "apify_shared", "crawlee"]

[tool.ruff.lint.pylint]
max-branches = 18

[tool.pytest.ini_options]
addopts = "-ra"
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
timeout = 1200

[tool.mypy]
python_version = "3.9"
plugins = ["pydantic.mypy"]
files = ["src", "tests", "docs", "website"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true
exclude = []

[[tool.mypy.overrides]]
module = [
    'bs4',
    'lazy_object_proxy',
    'nest_asyncio',
    'playwright.*',
    'scrapy.*',
    'selenium.*',
]
ignore_missing_imports = true

[tool.basedpyright]
pythonVersion = "3.9"
typeCheckingMode = "standard"
include = ["src", "tests", "docs", "website"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:", "assert_never()"]

[tool.ipdb]
context = 7
